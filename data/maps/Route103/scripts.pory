mapscripts Route103_MapScripts {
	MAP_SCRIPT_ON_TRANSITION : Route103_OnTransition
}

const LOCALID_RHETT = 13

script Route103_OnTransition {
	call(Common_EventScript_SetWild_0)
	call(Common_EventScript_DisableBPReward)
	end
}

script Route103_EventScript_RouteSign {
	msgbox("Route 103\p{UP_ARROW} Verdant Forest\n{DOWN_ARROW} Oldale Town", MSGBOX_SIGN)
	end
}

script Route103_EventScript_Man {
	lock
	faceplayer
	msgbox(format("If you don't have Pokémon able to Surf, you can cross the bike bridge to reach Oldale."))
	msgbox(format("Fufufufufu, that's so convenient."))
	release
	end
}

script Route103_EventScript_Boy {
	lock
	faceplayer
	msgbox(format("If I had a bike, I could ride across the bridge to get to Mauville and Slateport."))
	msgbox(format("But to get a bike I have to go to the bike shop… in Mauville!"))
	msgbox(format("Whose idea was this?"))
	release
	end
}

script Route103_EventScript_Nurse {
	lock
	faceplayer
	msgbox(format("Want me to heal your Pokémon?"), MSGBOX_YESNO)
	call_if_eq(VAR_RESULT, YES, Common_EventScript_OutOfCenterPartyHeal)
	msgbox(format("Be careful, Trainer!"))
	release
	end
}

script Route103_EventScript_Daisy {
	trainerbattle_single(TRAINER_DAISY, Route103_Text_DaisyIntro, Route103_Text_DaisyDefeated)
	msgbox(Route103_Text_DaisyPostBattle, MSGBOX_AUTOCLOSE)
	call(Route103_EventScript_TryDaisyRematch)
	release
	end
}
script Route103_EventScript_TryDaisyRematch {
	lock
    call(Common_EventScript_ShouldDoRematch)
	goto_if_eq(VAR_RESULT, FALSE, Common_EventScript_NopReturn)
	setvar(VAR_0x8003, TRAINER_DAISY)
	setvar(VAR_0x8004, 1)
	call(Common_EventScript_CheckRecentRematchesSetBP)
	trainerbattle_no_intro(TRAINER_DAISY, Route103_Text_DaisyDefeated)
	special(UpdateRecentTrainers)
	return
}

script Route103_EventScript_Amy {
	trainerbattle_double(TRAINER_AMY_AND_LIV, Route103_Text_AmyIntro, Route103_Text_AmyDefeated, Route103_Text_AmyNotEnoughPokemon)
	msgbox(Route103_Text_AmyPostBattle, MSGBOX_AUTOCLOSE)
	call(Route103_EventScript_TryAmyRematch)
	release
	end
}
script Route103_EventScript_TryAmyRematch {
	lock
    call(Common_EventScript_ShouldDoRematch)
	goto_if_eq(VAR_RESULT, FALSE, Common_EventScript_NopReturn)
	setvar(VAR_0x8003, TRAINER_AMY_AND_LIV)
	setvar(VAR_0x8004, 1)
	call(Common_EventScript_CheckRecentRematchesSetBP)
	trainerbattle_no_intro(TRAINER_AMY_AND_LIV, Route103_Text_AmyRematchDefeated)
	special(UpdateRecentTrainers)
	return
}

script Route103_EventScript_Liv {
	trainerbattle_double(TRAINER_AMY_AND_LIV, Route103_Text_LivIntro, Route103_Text_LivDefeated, Route103_Text_LivNotEnoughPokemon)
	msgbox(Route103_Text_LivPostBattle, MSGBOX_AUTOCLOSE)
	call(Route103_EventScript_TryLivRematch)
	release
	end
}
script Route103_EventScript_TryLivRematch {
	lock
    call(Common_EventScript_ShouldDoRematch)
	goto_if_eq(VAR_RESULT, FALSE, Common_EventScript_NopReturn)
	setvar(VAR_0x8003, TRAINER_AMY_AND_LIV)
	setvar(VAR_0x8004, 1)
	call(Common_EventScript_CheckRecentRematchesSetBP)
	trainerbattle_no_intro(TRAINER_AMY_AND_LIV, Route103_Text_LivRematchDefeated)
	special(UpdateRecentTrainers)
	return
}

script Route103_EventScript_Andrew {
	trainerbattle_single(TRAINER_ANDREW, Route103_Text_AndrewIntro, Route103_Text_AndrewDefeated)
	msgbox(Route103_Text_AndrewPostBattle, MSGBOX_AUTOCLOSE)
	call(Route103_EventScript_TryAndrewRematch)
	release
	end
}
script Route103_EventScript_TryAndrewRematch {
	lock
    call(Common_EventScript_ShouldDoRematch)
	goto_if_eq(VAR_RESULT, FALSE, Common_EventScript_NopReturn)
	setvar(VAR_0x8003, TRAINER_ANDREW)
	setvar(VAR_0x8004, 1)
	call(Common_EventScript_CheckRecentRematchesSetBP)
	trainerbattle_no_intro(TRAINER_ANDREW, Route103_Text_AndrewDefeated)
	special(UpdateRecentTrainers)
	return
}

script Route103_EventScript_Miguel {
	trainerbattle_single(TRAINER_MIGUEL, Route103_Text_MiguelIntro, Route103_Text_MiguelDefeated)
	msgbox(Route103_Text_MiguelPostBattle, MSGBOX_DEFAULT)
	call(Route103_EventScript_TryMiguelRematch)
	release
	end
}
script Route103_EventScript_TryMiguelRematch {
	lock
    call(Common_EventScript_ShouldDoRematch)
	goto_if_eq(VAR_RESULT, FALSE, Common_EventScript_NopReturn)
	setvar(VAR_0x8003, TRAINER_MIGUEL)
	setvar(VAR_0x8004, 1)
	call(Common_EventScript_CheckRecentRematchesSetBP)
	trainerbattle_no_intro(TRAINER_MIGUEL, Route103_Text_MiguelRematchDefeated)
	special(UpdateRecentTrainers)
	return
}

script Route103_EventScript_Marcos {
	trainerbattle_single(TRAINER_MARCOS, Route103_Text_MarcosIntro, Route103_Text_MarcosDefeated)
	msgbox(Route103_Text_MarcosPostBattle, MSGBOX_AUTOCLOSE)
	call(Route103_EventScript_TryMarcosRematch)
	release
	end
}
script Route103_EventScript_TryMarcosRematch {
	lock
    call(Common_EventScript_ShouldDoRematch)
	goto_if_eq(VAR_RESULT, FALSE, Common_EventScript_NopReturn)
	setvar(VAR_0x8003, TRAINER_MARCOS)
	setvar(VAR_0x8004, 1)
	if (defeated(TRAINER_RHETT)) {
		msgbox(format("Include Rhett and make it a double battle?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == YES) {
			trainerbattle(TRAINER_BATTLE_SET_TRAINER_B, TRAINER_RHETT, 0, NULL, Route103_Text_RhettDefeated)
			addvar(VAR_0x8004, 2)
		}
	}
	call(Common_EventScript_CheckRecentRematchesSetBP)
	trainerbattle_no_intro(TRAINER_MARCOS, Route103_Text_MarcosDefeated)
	special(UpdateRecentTrainers)
	return
}

script Route103_EventScript_Rhett {
	trainerbattle_single(TRAINER_RHETT, Route103_Text_RhettIntro, Route103_Text_RhettDefeated)
	msgbox(Route103_Text_RhettPostBattle, MSGBOX_AUTOCLOSE)
	call(Route103_EventScript_TryRhettRematch)
	release
	end
}
script Route103_EventScript_TryRhettRematch {
	lock
    call(Common_EventScript_ShouldDoRematch)
	goto_if_eq(VAR_RESULT, FALSE, Common_EventScript_NopReturn)
	setvar(VAR_0x8003, TRAINER_RHETT)
	setvar(VAR_0x8004, 1)
	if (defeated(TRAINER_MARCOS)) {
		msgbox(format("Include Marcos and make it a double battle?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == YES) {
			trainerbattle(TRAINER_BATTLE_SET_TRAINER_B, TRAINER_MARCOS, 0, NULL, Route103_Text_MarcosDefeated)
			addvar(VAR_0x8004, 2)
		}
	}
	call(Common_EventScript_CheckRecentRematchesSetBP)
	trainerbattle_no_intro(TRAINER_RHETT, Route103_Text_RhettDefeated)
	special(UpdateRecentTrainers)
	return
}

script Route103_EventScript_Pete {
	trainerbattle_single(TRAINER_PETE, Route103_Text_PeteIntro, Route103_Text_PeteDefeated)
	msgbox(Route103_Text_PetePostBattle, MSGBOX_AUTOCLOSE)
	call(Route103_EventScript_TryPeteRematch)
	release
	end
}
script Route103_EventScript_TryPeteRematch {
	lock
    call(Common_EventScript_ShouldDoRematch)
	goto_if_eq(VAR_RESULT, FALSE, Common_EventScript_NopReturn)
	setvar(VAR_0x8003, TRAINER_PETE)
	setvar(VAR_0x8004, 1)
	if (defeated(TRAINER_ISABELLE)) {
		msgbox(format("Include Isabelle and make it a double battle?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == YES) {
			trainerbattle(TRAINER_BATTLE_SET_TRAINER_B, TRAINER_ISABELLE, 0, NULL, Route103_Text_IsabelleDefeated)
			addvar(VAR_0x8004, 1)
		}
	}
	call(Common_EventScript_CheckRecentRematchesSetBP)
    trainerbattle_no_intro(TRAINER_PETE, Route103_Text_PeteDefeated)
	special(UpdateRecentTrainers)
	return
}

script Route103_EventScript_Isabelle {
	trainerbattle_single(TRAINER_ISABELLE, Route103_Text_IsabelleIntro, Route103_Text_IsabelleDefeated)
	msgbox(Route103_Text_IsabellePostBattle, MSGBOX_AUTOCLOSE)
	call(Route103_EventScript_TryIsabellaRematch)
	release
	end
}
script Route103_EventScript_TryIsabellaRematch {
	lock
    call(Common_EventScript_ShouldDoRematch)
	goto_if_eq(VAR_RESULT, FALSE, Common_EventScript_NopReturn)
	setvar(VAR_0x8003, TRAINER_ISABELLE)
	setvar(VAR_0x8004, 1)
	if (defeated(TRAINER_PETE)) {
		msgbox(format("Include Pete and make it a double battle?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == YES) {
			trainerbattle(TRAINER_BATTLE_SET_TRAINER_B, TRAINER_PETE, 0, NULL, Route103_Text_PeteDefeated)
			addvar(VAR_0x8004, 1)
		}
	}
	call(Common_EventScript_CheckRecentRematchesSetBP)
    trainerbattle_no_intro(TRAINER_ISABELLE, Route103_Text_IsabelleDefeated)
	special(UpdateRecentTrainers)
	return
}

