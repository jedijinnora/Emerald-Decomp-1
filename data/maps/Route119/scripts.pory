const LOCALID_STASH = 31
const LOCALID_KOBAYASHI = 37

script Route119_EventScript_TryMoveStash {
	goto_if_set(FLAG_HIDE_SECRET_STASH_ROUTE_119, Common_EventScript_NopReturn)
	switch(var(VAR_SECRET_STASH_STATE)) {
		case 0:
			setobjectxyperm(LOCALID_STASH, 9, 18)
		case 1:
			setobjectxyperm(LOCALID_STASH, 39, 51)
		case 2:
			setobjectxyperm(LOCALID_STASH, 17, 83)
		case 3:
			setobjectxyperm(LOCALID_STASH, 5, 96)
		default:
			setobjectxyperm(LOCALID_STASH, 6, 129)
	}
	return
}

script Route119_EventScript_Stash {
	setvar(VAR_TEMP_D, ITEM_CARBOS)
	setvar(VAR_TEMP_E, ITEM_LEAF_STONE)
	setvar(VAR_TEMP_F, ITEM_THUNDER_STONE)
	call(Common_EventScript_SecretStash)
	end
}


//Ninja NPC allows the player to inflict status on chosen Pokémon
//VAR_STATUS_NINJA_STATE:
//0: initial, pre-interaction (visible)
//11: player challenged to defeat Mimic Circle (invisible)
//2: mimic circle defeated, pre-interaction (visible)
//13: player challenged to defeat Trick House 1 (all Trainers on Route 110 if NoHMs challenge) (invisible)
//4: r110 challenge defeated, pre-interaction (visible)
//20: defeated, now appears in Pokémon Centers (invisible)
//5: player lost and must return to fight again (visible)

//if VAR_STATUS_NINJA_STATE > 10, hide ninja (called by transition mapscript)
script Route119_EventScript_HideNinja {
	setflag(FLAG_TEMP_11)
	return
}

script Route119_EventScript_TryUpdateNinja {
	switch(var(VAR_STATUS_NINJA_STATE)) {
		case 11:
			call(Route119_EventScript_TryCompleteMimic)
		case 13:
			call(Route119_EventScript_TryCompleteR110)
		default:
	}
	return
}

script Route119_EventScript_TryCompleteMimic {
	goto_if_not_defeated(TRAINER_GREG, Common_EventScript_NopReturn)
	goto_if_not_defeated(TRAINER_TAYLOR, Common_EventScript_NopReturn)
	goto_if_not_defeated(TRAINER_DONALD, Common_EventScript_NopReturn)
	goto_if_not_defeated(TRAINER_BRENT, Common_EventScript_NopReturn)
	goto_if_not_defeated(TRAINER_DOUG, Common_EventScript_NopReturn)
	goto_if_not_defeated(TRAINER_KENT, Common_EventScript_NopReturn)
	setvar(VAR_STATUS_NINJA_STATE, 2)
	clearflag(FLAG_TEMP_11)
	return
}

script Route119_EventScript_TryCompleteR110 {
	goto_if_not_defeated(TRAINER_JASMINE, Common_EventScript_NopReturn)
	goto_if_not_defeated(TRAINER_ANTHONY, Common_EventScript_NopReturn)
	goto_if_not_defeated(TRAINER_ABIGAIL, Common_EventScript_NopReturn)
	goto_if_not_defeated(TRAINER_BENJAMIN, Common_EventScript_NopReturn)
	goto_if_not_defeated(TRAINER_EDWARD, Common_EventScript_NopReturn)
	goto_if_not_defeated(TRAINER_JACLYN, Common_EventScript_NopReturn)
	goto_if_not_defeated(TRAINER_EDWIN, Common_EventScript_NopReturn)
	goto_if_not_defeated(TRAINER_DALE, Common_EventScript_NopReturn)
	goto_if_not_defeated(TRAINER_JACOB, Common_EventScript_NopReturn)
	goto_if_not_defeated(TRAINER_TIMMY, Common_EventScript_NopReturn)
	goto_if_not_defeated(TRAINER_ISABEL, Common_EventScript_NopReturn)
	goto_if_not_defeated(TRAINER_KALEB, Common_EventScript_NopReturn)
	goto_if_not_defeated(TRAINER_ALYSSA, Common_EventScript_NopReturn)
	goto_if_not_defeated(TRAINER_JOSEPH, Common_EventScript_NopReturn)
	if(flag(FLAG_CHALLENGE_HM_NONE) || var(VAR_TRICK_HOUSE_PUZZLE_2_STATE) == 2) {
		setvar(VAR_STATUS_NINJA_STATE, 4)
		clearflag(FLAG_TEMP_11)
	}
	return
}

//handles all 119 interactions
script Route119_EventScript_StatusNinja {
	lock
	faceplayer
	call(EventScript_RevealTrainer)
	switch(var(VAR_STATUS_NINJA_STATE)) {
		case 0: //initial
			call(Route119_EventScript_StatusNinja_Intro)
		case 2: //mimic circle defeated
			call(Route119_EventScript_StatusNinja_MimicCircleDefeated)
		case 4: //r110 challenge defeated
			call(Route119_EventScript_StatusNinja_R110ChallengeDefeated)
		case 5: //rematch
			call(Route119_EventScript_StatusNinja_Rematch)
		default: //shouldn't ever be reached
	}
	release
	end
}

script Route119_EventScript_StatusNinjaVanish {
	applymovement(LOCALID_KOBAYASHI, KecleonVanish)
	waitmovement(0)
	setflag(FLAG_TEMP_11)
	return
}

script Route119_EventScript_StatusNinja_Intro {
	msgbox(format("Ah, a new Trainer!"))
	msgbox(format("I am Kobayashi, the Status Ninja. But you shall call me Kobayashi-sensei."))
	msgbox(format("I can give your Pokémon status conditions so that you may execute the most fiendish strategies in battle!"))
	msgbox(format("…But of course, you must defeat my challenges first!"))
	call(Route119_EventScript_TryCompleteMimic)
	goto_if_eq(VAR_STATUS_NINJA_STATE, 2, Route119_EventScript_StatusNinja_MimicCircleDefeated)
	msgbox(format("First, you must defeat the Mimic Circle!"))
	msgbox(format("I'll be waiting!"))
	setvar(VAR_STATUS_NINJA_STATE, 11)
	call(Route119_EventScript_StatusNinjaVanish)
	release
	end
}

script Route119_EventScript_StatusNinja_MimicCircleDefeated {
	playse(SE_PIN)
	applymovement(LOCALID_KOBAYASHI, Common_Movement_ExclamationMark)
	waitmovement(0)
	msgbox(format("I see you've triumphed already!"))
	setvar(VAR_STATUS_NINJA_STATE, 13)
	call(Route119_EventScript_TryCompleteR110)
	goto_if_eq(VAR_STATUS_NINJA_STATE, 4, Route119_EventScript_StatusNinja_R110ChallengeDefeated)
	msgbox(format("The Mimic circle was too weak a challenge for a Trainer of your talents."))
	msgbox(format("Fine! You shall go and defeat every Trainer on Route 110!"))
	if(!flag(FLAG_CHALLENGE_HM_NONE) && var(VAR_TRICK_HOUSE_PUZZLE_2_STATE) != 2) {
		msgbox(format("Also, solve the first two puzzles of the Trick Master!"))
	}
	msgbox(format("Now, begone!"))
	setvar(VAR_STATUS_NINJA_STATE, 13)
	call(Route119_EventScript_StatusNinjaVanish)
	release
	end
}

script Route119_EventScript_StatusNinja_R110ChallengeDefeated {
	msgbox(format("Ah, you've defeated my challenges."))
	trainerbattle_single(TRAINER_KOBAYASHI, Route119_Text_KobayashiIntro, Route119_Text_KobayashiDefeated, Route119_EventScript_KobayashiDefeated)
	return
}

script Route119_EventScript_StatusNinja_Rematch {
	msgbox(format("You could not stand against my skill before, and yet you return?"))
	trainerbattle_single(TRAINER_KOBAYASHI, Route119_Text_KobayashiRematchIntro, Route119_Text_KobayashiRematchDefeated, Route119_EventScript_KobayashiDefeated)
	return
}

script Route119_EventScript_KobayashiDefeated {
	setvar(VAR_STATUS_NINJA_STATE, 20)
	clearflag(FLAG_HIDE_POKECENTER_STATUS_NINJA)
	msgbox(format("Well done! As promised, I can give your Pokémon any status you desire."))
	msgbox(format("Find me in any Pokémon Center! And may the odds be ever in your favor."))
	waitmessage
	call(Route119_EventScript_StatusNinjaVanish)
	release
	end
}
text Route119_Text_KobayashiIntro {
	"But you haven't defeated me!"
}
text Route119_Text_KobayashiDefeated {
	"You're worthy of my skills!"
}
text Route119_Text_KobayashiRematchIntro {
	"Show me your dedication. Bring it on!"
}
text Route119_Text_KobayashiRematchDefeated {
	"I suppose this time you've proven \n"
	"worthy of my skills."
}

//handles status interactions, placed here for my convenience
script Common_EventScript_StatusNinja {
	lock
	faceplayer
	msgbox(format("Aha! You must be in need of my genius!\pWhich Pokémon should have a status condition inflicted upon it?"))
	special(ChoosePartyMon)
	waitstate
	if(var(VAR_0x8004) == PARTY_NOTHING_CHOSEN) {
		release
		end
	}
	specialvar(VAR_RESULT, ScriptGetPartyMonSpecies)
	if(var(VAR_RESULT) == SPECIES_EGG) {
		msgbox(format("That's an Egg, dummy! Why would I waste my genius on that?"))
	}
	bufferpartymonnick(STR_VAR_1, VAR_0x8004)

	msgbox(format("Which status condition shall I give your {STR_VAR_1}?"))
	dynmultipush("Sleep", 1)
	dynmultipush("Poison", 2)
	dynmultipush("Burn", 3)
	dynmultipush("Paralysis", 4)
	dynmultipush("Frostbite", 5)
	
	dynmultistack(0,0,FALSE,6,TRUE,1,DYN_MULTICHOICE_CB_NONE)
	switch(var(VAR_RESULT)) {
		case 1:
			specialvar(VAR_RESULT, TryOverworldSleepMon)
		case 2:
			specialvar(VAR_RESULT, TryOverworldPoisonMon)
		case 3:
			specialvar(VAR_RESULT, TryOverworldBurnMon)
		case 4:
			specialvar(VAR_RESULT, TryOverworldParalyzeMon)
		case 5
			specialvar(VAR_RESULT, TryOverworldFreezeMon)
		default:
	}
	release
	end
}

script Route119_EventScript_Brent {
	trainerbattle_single(TRAINER_BRENT, Route119_Text_BrentIntro, Route119_Text_BrentDefeat)
	msgbox(Route119_Text_BrentPostBattle, MSGBOX_AUTOCLOSE)
	call(Route119_EventScript_TryBrentRematch)
	release
	end
}
script Route119_EventScript_TryBrentRematch {
	lock
    call(Common_EventScript_ShouldDoRematch)
	goto_if_eq(VAR_RESULT, FALSE, Common_EventScript_NopReturn)
	setvar(VAR_0x8003, TRAINER_BRENT)
	setvar(VAR_0x8004, 1)
	call(Common_EventScript_CheckRecentRematchesSetBP)
	trainerbattle_no_intro(TRAINER_BRENT, Route119_Text_BrentDefeat)
	special(UpdateRecentTrainers)
	return
}

script Route119_EventScript_Donald {
	trainerbattle_single(TRAINER_DONALD, Route119_Text_DonaldIntro, Route119_Text_DonaldDefeat)
	msgbox(Route119_Text_DonaldPostBattle, MSGBOX_AUTOCLOSE)
	call(Route119_EventScript_TryDonaldRematch)
	release
	end
}
script Route119_EventScript_TryDonaldRematch {
	lock
    call(Common_EventScript_ShouldDoRematch)
	goto_if_eq(VAR_RESULT, FALSE, Common_EventScript_NopReturn)
	setvar(VAR_0x8003, TRAINER_DONALD)
	setvar(VAR_0x8004, 1)
	call(Common_EventScript_CheckRecentRematchesSetBP)
	trainerbattle_no_intro(TRAINER_DONALD, Route119_Text_DonaldDefeat)
	special(UpdateRecentTrainers)
	return
}

script Route119_EventScript_Taylor {
	trainerbattle_single(TRAINER_TAYLOR, Route119_Text_TaylorIntro, Route119_Text_TaylorDefeat)
	msgbox(Route119_Text_TaylorPostBattle, MSGBOX_AUTOCLOSE)
	call(Route119_EventScript_TryTaylorRematch)
	release
	end
}
script Route119_EventScript_TryTaylorRematch {
	lock
    call(Common_EventScript_ShouldDoRematch)
	goto_if_eq(VAR_RESULT, FALSE, Common_EventScript_NopReturn)
	setvar(VAR_0x8003, TRAINER_TAYLOR)
	setvar(VAR_0x8004, 1)
	call(Common_EventScript_CheckRecentRematchesSetBP)
	trainerbattle_no_intro(TRAINER_TAYLOR, Route119_Text_TaylorDefeat)
	special(UpdateRecentTrainers)
	return
}

script Route119_EventScript_Doug {
	trainerbattle_single(TRAINER_DOUG, Route119_Text_DougIntro, Route119_Text_DougDefeat)
	msgbox(Route119_Text_DougPostBattle, MSGBOX_AUTOCLOSE)
	call(Route119_EventScript_TryDougRematch)
	release
	end
}
script Route119_EventScript_TryDougRematch {
	lock
    call(Common_EventScript_ShouldDoRematch)
	goto_if_eq(VAR_RESULT, FALSE, Common_EventScript_NopReturn)
	setvar(VAR_0x8003, TRAINER_DOUG)
	setvar(VAR_0x8004, 1)
	call(Common_EventScript_CheckRecentRematchesSetBP)
	trainerbattle_no_intro(TRAINER_DOUG, Route119_Text_DougDefeat)
	special(UpdateRecentTrainers)
	return
}

script Route119_EventScript_Greg {
	trainerbattle_single(TRAINER_GREG, Route119_Text_GregIntro, Route119_Text_GregDefeat)
	msgbox(Route119_Text_GregPostBattle, MSGBOX_AUTOCLOSE)
	call(Route119_EventScript_TryGregRematch)
	release
	end
}
script Route119_EventScript_TryGregRematch {
	lock
    call(Common_EventScript_ShouldDoRematch)
	goto_if_eq(VAR_RESULT, FALSE, Common_EventScript_NopReturn)
	setvar(VAR_0x8003, TRAINER_GREG)
	setvar(VAR_0x8004, 1)
	call(Common_EventScript_CheckRecentRematchesSetBP)
	trainerbattle_no_intro(TRAINER_GREG, Route119_Text_GregDefeat)
	special(UpdateRecentTrainers)
	return
}

script Route119_EventScript_Kent {
	trainerbattle_single(TRAINER_KENT, Route119_Text_KentIntro, Route119_Text_KentDefeat)
	msgbox(Route119_Text_KentPostBattle, MSGBOX_AUTOCLOSE)
	call(Route119_EventScript_TryKentRematch)
	release
	end
}
script Route119_EventScript_TryKentRematch {
	lock
    call(Common_EventScript_ShouldDoRematch)
	goto_if_eq(VAR_RESULT, FALSE, Common_EventScript_NopReturn)
	setvar(VAR_0x8003, TRAINER_KENT)
	setvar(VAR_0x8004, 1)
	call(Common_EventScript_CheckRecentRematchesSetBP)
	trainerbattle_no_intro(TRAINER_KENT, Route119_Text_KentDefeat)
	special(UpdateRecentTrainers)
	return
}

script Route119_EventScript_Jackson {
	trainerbattle_single(TRAINER_JACKSON, Route119_Text_JacksonIntro, Route119_Text_JacksonDefeat)
	msgbox(Route119_Text_JacksonPostBattle, MSGBOX_DEFAULT)
	call(Route119_EventScript_TryJacksonRematch)
	release
	end
}
script Route119_EventScript_TryJacksonRematch {
	lock
    call(Common_EventScript_ShouldDoRematch)
	goto_if_eq(VAR_RESULT, FALSE, Common_EventScript_NopReturn)
	setvar(VAR_0x8003, TRAINER_JACKSON)
	setvar(VAR_0x8004, 2)
	call(Common_EventScript_CheckRecentRematchesSetBP)
	trainerbattle_no_intro(TRAINER_JACKSON, Route119_Text_JacksonDefeat)
	special(UpdateRecentTrainers)
	return
}

script Route119_EventScript_Catherine {
	trainerbattle_single(TRAINER_CATHERINE, Route119_Text_CatherineIntro, Route119_Text_CatherineDefeat)
	msgbox(Route119_Text_CatherinePostBattle, MSGBOX_DEFAULT)
	call(Route119_EventScript_TryCatherineRematch)
	release
	end
}
script Route119_EventScript_TryCatherineRematch {
	lock
    call(Common_EventScript_ShouldDoRematch)
	goto_if_eq(VAR_RESULT, FALSE, Common_EventScript_NopReturn)
	setvar(VAR_0x8003, TRAINER_CATHERINE)
	setvar(VAR_0x8004, 2)
	call(Common_EventScript_CheckRecentRematchesSetBP)
	trainerbattle_no_intro(TRAINER_CATHERINE, Route119_Text_CatherineDefeat)
	special(UpdateRecentTrainers)
	return
}

script Route119_EventScript_Hugh {
	trainerbattle_single(TRAINER_HUGH, Route119_Text_HughIntro, Route119_Text_HughDefeat)
	msgbox(Route119_Text_HughPostBattle, MSGBOX_AUTOCLOSE)
	call(Route119_EventScript_TryHughRematch)
	release
	end
}
script Route119_EventScript_TryHughRematch {
	lock
    call(Common_EventScript_ShouldDoRematch)
	goto_if_eq(VAR_RESULT, FALSE, Common_EventScript_NopReturn)
	setvar(VAR_0x8003, TRAINER_HUGH)
	setvar(VAR_0x8004, 1)
	if (defeated(TRAINER_YASU)) {
		msgbox(format("Include Yasu and make it a double battle?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == YES) {
			trainerbattle(TRAINER_BATTLE_SET_TRAINER_B, TRAINER_YASU, 0, NULL, Route119_Text_YasuDefeat)
			addvar(VAR_0x8004, 1)
		}
	}
	call(Common_EventScript_CheckRecentRematchesSetBP)
	trainerbattle_no_intro(TRAINER_HUGH, Route119_Text_HughDefeat)
	special(UpdateRecentTrainers)
	return
}

script Route119_EventScript_Phil {
	trainerbattle_single(TRAINER_PHIL, Route119_Text_PhilIntro, Route119_Text_PhilDefeat)
	msgbox(Route119_Text_PhilPostBattle, MSGBOX_AUTOCLOSE)
	call(Route119_EventScript_TryPhilRematch)
	release
	end
}
script Route119_EventScript_TryPhilRematch {
	lock
    call(Common_EventScript_ShouldDoRematch)
	goto_if_eq(VAR_RESULT, FALSE, Common_EventScript_NopReturn)
	setvar(VAR_0x8003, TRAINER_PHIL)
	setvar(VAR_0x8004, 1)
	if (defeated(TRAINER_RACHEL)) {
		msgbox(format("Include Rachel and make it a double battle?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == YES) {
			trainerbattle(TRAINER_BATTLE_SET_TRAINER_B, TRAINER_RACHEL, 0, NULL, Route119_Text_RachelDefeat)
			addvar(VAR_0x8004, 1)
		}
	}
	call(Common_EventScript_CheckRecentRematchesSetBP)
	trainerbattle_no_intro(TRAINER_PHIL, Route119_Text_PhilDefeat)
	special(UpdateRecentTrainers)
	return
}

script Route119_EventScript_Yasu {
	trainerbattle_single(TRAINER_YASU, Route119_Text_YasuIntro, Route119_Text_YasuDefeat)
	msgbox(Route119_Text_YasuPostBattle, MSGBOX_AUTOCLOSE)
	call(Route119_EventScript_TryYasuRematch)
	release
	end
}
script Route119_EventScript_TryYasuRematch {
	lock
    call(Common_EventScript_ShouldDoRematch)
	goto_if_eq(VAR_RESULT, FALSE, Common_EventScript_NopReturn)
	setvar(VAR_0x8003, TRAINER_YASU)
	setvar(VAR_0x8004, 1)
	if (defeated(TRAINER_HUGH)) {
		msgbox(format("Include Hugh and make it a double battle?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == YES) {
			trainerbattle(TRAINER_BATTLE_SET_TRAINER_B, TRAINER_HUGH, 0, NULL, Route119_Text_HughDefeat)
			addvar(VAR_0x8004, 1)
		}
	}
	call(Common_EventScript_CheckRecentRematchesSetBP)
	trainerbattle_no_intro(TRAINER_YASU, Route119_Text_YasuDefeat)
	special(UpdateRecentTrainers)
	return
}

script Route119_EventScript_Takashi {
	trainerbattle_single(TRAINER_TAKASHI, Route119_Text_TakashiIntro, Route119_Text_TakashiDefeat)
	msgbox(Route119_Text_TakashiPostBattle, MSGBOX_AUTOCLOSE)
	call(Route119_EventScript_TryTakashiRematch)
	release
	end
}
script Route119_EventScript_TryTakashiRematch {
	lock
    call(Common_EventScript_ShouldDoRematch)
	goto_if_eq(VAR_RESULT, FALSE, Common_EventScript_NopReturn)
	setvar(VAR_0x8003, TRAINER_TAKASHI)
	setvar(VAR_0x8004, 1)
	if (defeated(TRAINER_DAYTON)) {
		msgbox(format("Include Dayton and make it a double battle?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == YES) {
			trainerbattle(TRAINER_BATTLE_SET_TRAINER_B, TRAINER_DAYTON, 0, NULL, Route119_Text_DaytonDefeat)
			addvar(VAR_0x8004, 1)
		}
	}
	call(Common_EventScript_CheckRecentRematchesSetBP)
	trainerbattle_no_intro(TRAINER_TAKASHI, Route119_Text_TakashiDefeat)
	special(UpdateRecentTrainers)
	return
}

script Route119_EventScript_Hideo {
	trainerbattle_single(TRAINER_HIDEO, Route119_Text_HideoIntro, Route119_Text_HideoDefeat)
	msgbox(Route119_Text_HideoPostBattle, MSGBOX_AUTOCLOSE)
	call(Route119_EventScript_TryHideoRematch)
	release
	end
}
script Route119_EventScript_TryHideoRematch {
	lock
    call(Common_EventScript_ShouldDoRematch)
	goto_if_eq(VAR_RESULT, FALSE, Common_EventScript_NopReturn)
	setvar(VAR_0x8003, TRAINER_HIDEO)
	setvar(VAR_0x8004, 1)
	call(Common_EventScript_CheckRecentRematchesSetBP)
	trainerbattle_no_intro(TRAINER_HIDEO, Route119_Text_HideoDefeat)
	special(UpdateRecentTrainers)
	return
}

script Route119_EventScript_Chris {
	trainerbattle_single(TRAINER_CHRIS, Route119_Text_ChrisIntro, Route119_Text_ChrisDefeat)
	msgbox(Route119_Text_ChrisPostBattle, MSGBOX_AUTOCLOSE)
	call(Route119_EventScript_TryChrisRematch)
	release
	end
}
script Route119_EventScript_TryChrisRematch {
	lock
    call(Common_EventScript_ShouldDoRematch)
	goto_if_eq(VAR_RESULT, FALSE, Common_EventScript_NopReturn)
	setvar(VAR_0x8003, TRAINER_CHRIS)
	setvar(VAR_0x8004, 1)
	call(Common_EventScript_CheckRecentRematchesSetBP)
	trainerbattle_no_intro(TRAINER_CHRIS, Route119_Text_ChrisDefeat)
	special(UpdateRecentTrainers)
	return
}

script Route119_EventScript_Fabian {
	trainerbattle_single(TRAINER_FABIAN, Route119_Text_FabianIntro, Route119_Text_FabianDefeat)
	msgbox(Route119_Text_FabianPostBattle, MSGBOX_AUTOCLOSE)
	call(Route119_EventScript_TryFabianRematch)
	release
	end
}
script Route119_EventScript_TryFabianRematch {
	lock
    call(Common_EventScript_ShouldDoRematch)
	goto_if_eq(VAR_RESULT, FALSE, Common_EventScript_NopReturn)
	setvar(VAR_0x8003, TRAINER_FABIAN)
	setvar(VAR_0x8004, 3)
	call(Common_EventScript_CheckRecentRematchesSetBP)
	trainerbattle_no_intro(TRAINER_FABIAN, Route119_Text_FabianDefeat)
	special(UpdateRecentTrainers)
	return
}

script Route119_EventScript_Dayton {
	trainerbattle_single(TRAINER_DAYTON, Route119_Text_DaytonIntro, Route119_Text_DaytonDefeat)
	msgbox(Route119_Text_DaytonPostBattle, MSGBOX_AUTOCLOSE)
	call(Route119_EventScript_TryDaytonRematch)
	release
	end
}
script Route119_EventScript_TryDaytonRematch {
	lock
    call(Common_EventScript_ShouldDoRematch)
	goto_if_eq(VAR_RESULT, FALSE, Common_EventScript_NopReturn)
	setvar(VAR_0x8003, TRAINER_DAYTON)
	setvar(VAR_0x8004, 1)
	if (defeated(TRAINER_TAKASHI)) {
		msgbox(format("Include Takashi and make it a double battle?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == YES) {
			trainerbattle(TRAINER_BATTLE_SET_TRAINER_B, TRAINER_TAKASHI, 0, NULL, Route119_Text_TakashiDefeat)
			addvar(VAR_0x8004, 1)
		}
	}
	call(Common_EventScript_CheckRecentRematchesSetBP)
	trainerbattle_no_intro(TRAINER_DAYTON, Route119_Text_DaytonDefeat)
	special(UpdateRecentTrainers)
	return
}

script Route119_EventScript_Rachel {
	trainerbattle_single(TRAINER_RACHEL, Route119_Text_RachelIntro, Route119_Text_RachelDefeat)
	msgbox(Route119_Text_RachelPostBattle, MSGBOX_AUTOCLOSE)
	call(Route119_EventScript_TryRachelRematch)
	release
	end
}
script Route119_EventScript_TryRachelRematch {
	lock
    call(Common_EventScript_ShouldDoRematch)
	goto_if_eq(VAR_RESULT, FALSE, Common_EventScript_NopReturn)
	setvar(VAR_0x8003, TRAINER_RACHEL)
	setvar(VAR_0x8004, 1)
	if (defeated(TRAINER_PHIL)) {
		msgbox(format("Include Phil and make it a double battle?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == YES) {
			trainerbattle(TRAINER_BATTLE_SET_TRAINER_B, TRAINER_PHIL, 0, NULL, Route119_Text_PhilDefeat)
			addvar(VAR_0x8004, 1)
		}
	}
	call(Common_EventScript_CheckRecentRematchesSetBP)
	trainerbattle_no_intro(TRAINER_RACHEL, Route119_Text_RachelDefeat)
	special(UpdateRecentTrainers)
	return
}

raw `
Route119_MapScripts::
	map_script MAP_SCRIPT_ON_RESUME, Route119_OnResume
	map_script MAP_SCRIPT_ON_TRANSITION, Route119_OnTransition
	.byte 0

Route119_OnResume:
	call_if_set FLAG_SYS_CTRL_OBJ_DELETE, Common_EventScript_TryRemoveCaughtEncounter
	end

Route119_OnTransition:
	special SetRoute119Weather
	call Route119_EventScript_TryMoveStash
	call Route119_EventScript_TryUpdateNinja
	call_if_gt VAR_STATUS_NINJA_STATE, 10, Route119_EventScript_HideNinja
	call Common_EventScript_DisableBPReward
	end

Route119_EventScript_CyclingTriathleteM::
	msgbox Route119_Text_TallGrassSnaresBikeTires, MSGBOX_NPC
	end

Route119_EventScript_RouteSignFortree::
	msgbox Route119_Text_RouteSignFortree, MSGBOX_SIGN
	end

Route119_EventScript_WeatherInstituteSign::
	msgbox Route119_Text_WeatherInstitute, MSGBOX_SIGN
	end

Route119_EventScript_Boy1::
	msgbox Route119_Text_ThoughtFlyByCatchingBirdMons, MSGBOX_NPC
	end

Route119_EventScript_Boy2::
	msgbox Route119_Text_CanYourMonMakeSecretBase, MSGBOX_NPC
	end

Route119_EventScript_TrainerTipsDecoration::
	msgbox Route119_Text_TrainerTipsDecoration, MSGBOX_SIGN
	end

Route119_Text_ThoughtFlyByCatchingBirdMons:
	.string "I thought you Fly by catching a whole\n"
	.string "flock of Bird Pokémon, and then\l"
	.string "hanging on to them somehow.\p"
	.string "But it turns out there's an HM move\n"
	.string "called Fly!\p"
	.string "I wish I'd known about that a long\n"
	.string "time ago…$"

Route119_Text_TallGrassSnaresBikeTires:
	.string "Tch…\n"
	.string "It's a no-go…\p"
	.string "The tall grass snares Bike tires.\n"
	.string "There's no way you can cycle here.$"

Route119_Text_CanYourMonMakeSecretBase:
	.string "Can your Pokémon use its Secret Power\n"
	.string "on a big pile of grass and make a\l"
	.string "Secret Base?$"

Route119_Text_RouteSignFortree:
	.string "Route 119\n"
	.string "{RIGHT_ARROW} Fortree City$"

Route119_Text_WeatherInstitute:
	.string "Weather Institute$"

Route119_Text_TrainerTipsDecoration:
	.string "Trainer Tips\p"
	.string "Up to sixteen decorations and\n"
	.string "furniture items can be placed in\l"
	.string "a Secret Base.\p"
	.string "Pick your favorite items and create\n"
	.string "your very own Secret Base exactly the\l"
	.string "way you want.$"
`
