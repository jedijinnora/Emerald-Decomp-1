const LOCALID_KECLEON = 7
const LOCALID_RIVAL = 9

//FLAG_TEMP_1A : Rival

//VAR_TEMP_1 : x coord
//VAR_TEMP_2 : y coord
//VAR_TEMP_A : north rival
//VAR_TEMP_B : east rival
//VAR_TEMP_C : south rival
//VAR_TEMP_D : west rival

mapscripts FortreeCity_MapScripts {
	MAP_SCRIPT_ON_TRANSITION : FortreeCity_OnTransition
	MAP_SCRIPT_ON_RESUME : FortreeCity_OnResume
}

script FortreeCity_OnTransition {
	call_if_unset(FLAG_VISITED_FORTREE_CITY, FortreeCity_EventScript_VisitFortree)
	call(FortreeCity_EventScript_TryRespawnKecleon)
	call_if_eq(VAR_FORTREE_CITY_STATE, 0, FortreeCity_EventScript_TrySpawnRival)
	setflag(FLAG_TEMP_1A)
	call_if_ne(VAR_FORTREE_CITY_STATE, 0, FortreeCity_EventScript_SetupRival)
	end
}

script FortreeCity_EventScript_VisitFortree {
	setflag(FLAG_VISITED_FORTREE_CITY)
	addvar(VAR_CITIES_VISITED, 1)
	return
}

script FortreeCity_OnResume {
	setstepcallback(STEP_CB_FORTREE_BRIDGE)
	call_if_set(FLAG_SYS_CTRL_OBJ_DELETE, Common_EventScript_TryRemoveCaughtEncounter)
	end
}

script FortreeCity_EventScript_TryRespawnKecleon {
	random(5)
	goto_if_gt(VAR_RESULT, 1, FortreeMoveKecleon)
	return

	FortreeMoveKecleon:
	clearflag(FLAG_HIDE_FORTREE_CITY_KECLEON)
	random(7)
	switch(var(VAR_RESULT)) {
		case 0:
			setobjectxy(LOCALID_KECLEON, 5, 28)
			setobjectxyperm(LOCALID_KECLEON, 5, 28)
		case 1:
			setobjectxy(LOCALID_KECLEON, 10, 32)
			setobjectxyperm(LOCALID_KECLEON, 10, 32)
		case 2:
			setobjectxy(LOCALID_KECLEON, 13, 23)
			setobjectxyperm(LOCALID_KECLEON, 13, 23)
		case 3:
			setobjectxy(LOCALID_KECLEON, 19, 26)
			setobjectxyperm(LOCALID_KECLEON, 19, 26)
		case 4:
			setobjectxy(LOCALID_KECLEON, 23, 12)
			setobjectxyperm(LOCALID_KECLEON, 23, 12)
		case 5:
			setobjectxy(LOCALID_KECLEON, 25, 32)
			setobjectxyperm(LOCALID_KECLEON, 25, 32)
		default:
    		setobjectxy(LOCALID_KECLEON, 30, 22)
			setobjectxyperm(LOCALID_KECLEON, 30, 22)
	}
	return
}

script FortreeCity_EventScript_TrySpawnRival {
	goto_if_lt(VAR_CITIES_VISITED, 4, Common_EventScript_NopReturn)
	goto_if_eq(VAR_DIFFICULTY_SETTING, 2, FortreeCity_EventScript_SpawnRival)
	goto_if_lt(VAR_CITIES_VISITED, 5, Common_EventScript_NopReturn)
	FortreeCity_EventScript_SpawnRival:
	getplayerxy(VAR_TEMP_1, VAR_TEMP_2)
	if (var(VAR_TEMP_1) > 200) { 
		//west entry
		setvar(VAR_0x8004, 3)
	} elif (var(VAR_TEMP_1) > 39) { 
		//east entry
		setvar(VAR_0x8004, 1)
	} else {
		//warp entry
		setvar(VAR_0x8004, 4)
	}
	setvar(VAR_0x8005, 6)
	specialvar(VAR_FORTREE_CITY_STATE, MultiplyVars)
	copyvar(VAR_0x8004, VAR_FORTREE_CITY_STATE)
	copyvar(VAR_0x8005, VAR_BLOCKER_RIVAL_RANDOM)
	specialvar(VAR_FORTREE_CITY_STATE, AddVars)
	call(Common_EventScript_IncrementRivalVar)
	return
}

script FortreeCity_EventScript_SetupRival {
	//if rival has been defeated, don't do anything
	goto_if_gt(VAR_FORTREE_CITY_STATE, 99, Common_EventScript_NopReturn)

	//clear rival object flag
	clearflag(FLAG_TEMP_1A)

	//lock all exits if the player has been visiting new cities
	if(var(VAR_CITIES_VISITED) > 3) {
		while (var(VAR_FORTREE_CITY_STATE) < 25) {
			addvar(VAR_FORTREE_CITY_STATE, 6)
		}
	}

	//buffer city variable and call setup
	copyvar(VAR_0x8004, VAR_FORTREE_CITY_STATE)
	call(Common_EventScript_SetupRival)
	return
}

script FortreeCity_EventScript_Rival {
	lock
	faceplayer
	switch(var(VAR_FORTREE_CITY_STATE)) {
		case 1:
		case 7:
		case 13:
		case 19:
		case 25:
			call(FortreeCity_EventScript_RivalLeaf)
		case 2:
		case 8:
		case 14:
		case 20:
		case 26:
			call(FortreeCity_EventScript_RivalCalem)
		case 3:
		case 9:
		case 15:
		case 21:
		case 27:
			call(FortreeCity_EventScript_RivalDawn)
		case 4:
		case 10:
		case 16:
		case 22:
		case 28:
			call(FortreeCity_EventScript_RivalHilbert)
		case 5:
		case 11:
		case 17:
		case 23:
		case 29:
			call(FortreeCity_EventScript_RivalKris)
		case 6:
		case 12:
		case 18:
		case 24:
		case 30:
			call(FortreeCity_EventScript_RivalRei)
		default:
	}
	release
	end
}

script FortreeCity_EventScript_RivalLeaf {
	msgbox(format("Leaf: Viridian City isn't nearly this green! Look at this place!"))
	return
}

script FortreeCity_EventScript_RivalKris {
	msgbox(format("Kris: I wonder what kinds of Pokémon you can find in the trees around here?"))
	return
}

script FortreeCity_EventScript_RivalDawn {
	msgbox(format("Dawn: You don't see this kind of rainforest in Sinnoh. It's all temperate and not so tropical."))
	return
}

script FortreeCity_EventScript_RivalRei {
	msgbox(format("Rei: A treetop house sounds like a nice place to live, doesn't it? Elevated, breezy, free from pollution…"))
	return
}

script FortreeCity_EventScript_RivalHilbert {
	msgbox(format("Hilbert: This is the most interesting city I've been to in Hoenn so far!"))
	return
}

script FortreeCity_EventScript_RivalCalem {
	msgbox(format("Calem: Treehouses? How barbaric."))
	return
}

script FortreeCity_EventScript_RivalEast {
	lock
	setobjectxyperm(LOCALID_RIVAL, 30, 4)
	addobject(LOCALID_RIVAL)
	applymovement(LOCALID_RIVAL, FortreeCity_Movement_RivalApproachEast)
	waitmovement(LOCALID_RIVAL)
	playse(SE_PIN)
	applymovement(LOCALID_RIVAL, Common_Movement_ExclamationMark)
	waitmovement(LOCALID_RIVAL)
	getplayerxy(VAR_TEMP_1, VAR_TEMP_2)
	switch(var(VAR_TEMP_2)) {
		case 7:
			applymovement(OBJ_EVENT_ID_PLAYER, FortreeCity_Movement_PlayerEast_1)
		case 8:
			applymovement(OBJ_EVENT_ID_PLAYER, FortreeCity_Movement_PlayerEast_2)
		case 9:
			applymovement(OBJ_EVENT_ID_PLAYER, FortreeCity_Movement_PlayerEast_3)
		case 10:
			applymovement(OBJ_EVENT_ID_PLAYER, FortreeCity_Movement_PlayerEast_4)
		default:
	}
	waitmovement(OBJ_EVENT_ID_PLAYER)
	copyvar(VAR_0x8004, VAR_FORTREE_CITY_STATE)
	call(Common_EventScript_RivalBattle)
	setvar(VAR_FORTREE_CITY_STATE, 100)
	closemessage
	applymovement(LOCALID_RIVAL, FortreeCity_Movement_RivalDepartEast)
	waitmovement(LOCALID_RIVAL)
	removeobject(LOCALID_RIVAL)
	call(Common_EventScript_ClearRivalAll)
	release
	end
}
movement FortreeCity_Movement_RivalApproachEast {
	walk_right * 2
	walk_down * 4
	walk_right * 5
}
movement FortreeCity_Movement_RivalDepartEast {
	walk_up
	walk_right * 9
}
movement FortreeCity_Movement_PlayerEast_1 {
	walk_down
	walk_in_place_faster_left
}
movement FortreeCity_Movement_PlayerEast_2 {
	walk_in_place_faster_left
}
movement FortreeCity_Movement_PlayerEast_3 {
	walk_up
	walk_in_place_faster_left
}
movement FortreeCity_Movement_PlayerEast_4 {
	walk_up * 2
	walk_in_place_faster_left
}

script FortreeCity_EventScript_RivalWest {
	lock
	setobjectxyperm(LOCALID_RIVAL, 9, 8)
	addobject(LOCALID_RIVAL)
	applymovement(LOCALID_RIVAL, FortreeCity_Movement_RivalApproachWest)
	waitmovement(LOCALID_RIVAL)
	playse(SE_PIN)
	applymovement(LOCALID_RIVAL, Common_Movement_ExclamationMark)
	waitmovement(LOCALID_RIVAL)
	getplayerxy(VAR_TEMP_1, VAR_TEMP_2)
	switch(var(VAR_TEMP_2)) {
		case 7:
			applymovement(OBJ_EVENT_ID_PLAYER, FortreeCity_Movement_PlayerWest_1)
		case 8:
			applymovement(OBJ_EVENT_ID_PLAYER, FortreeCity_Movement_PlayerWest_2)
		case 9:
			applymovement(OBJ_EVENT_ID_PLAYER, FortreeCity_Movement_PlayerWest_3)
		case 10:
			applymovement(OBJ_EVENT_ID_PLAYER, FortreeCity_Movement_PlayerWest_4)
		default:
	}
	waitmovement(OBJ_EVENT_ID_PLAYER)
	copyvar(VAR_0x8004, VAR_FORTREE_CITY_STATE)
	call(Common_EventScript_RivalBattle)
	setvar(VAR_FORTREE_CITY_STATE, 100)
	closemessage
	applymovement(LOCALID_RIVAL, FortreeCity_Movement_RivalDepartWest)
	waitmovement(LOCALID_RIVAL)
	removeobject(LOCALID_RIVAL)
	call(Common_EventScript_ClearRivalAll)
	release
	end
}
movement FortreeCity_Movement_RivalApproachWest {
	walk_left * 7
}
movement FortreeCity_Movement_RivalDepartWest {
	walk_right * 8
}
movement FortreeCity_Movement_PlayerWest_1 {
	walk_down
	walk_in_place_faster_right
}
movement FortreeCity_Movement_PlayerWest_2 {
	walk_in_place_faster_right
}
movement FortreeCity_Movement_PlayerWest_3 {
	walk_up
	walk_in_place_faster_right
}
movement FortreeCity_Movement_PlayerWest_4 {
	walk_up * 2
	walk_in_place_faster_right
}

script FortreeCity_EventScript_CitySign {
	msgbox("Fortree City\p “The treetop city that frolics with \nnature.”", MSGBOX_SIGN)
	end
}

script FortreeCity_EventScript_GymSign {
	msgbox("Fortree City Pokémon Gym\p Leader: Spenser\n“The wise master of the jungle.”", MSGBOX_SIGN)
	end
}

script FortreeCity_EventScript_Man {
	lock
	faceplayer
	msgbox(format("Ow, my back…"))
	msgbox(format("Living in the treetops doesn't suit me."))
	msgbox(format("Why can't we bulldoze some of the jungle and put in real houses?"))
	release
	end
}

script FortreeCity_EventScript_Girl {
	lock
	faceplayer
	msgbox(format("Trees use sunlight to turn carbon dioxide and water into wood, leaves, and oxygen."))
	msgbox(format("All they need is enough rainfall and some trace minerals from the soil."))
	msgbox(format("The power of photosynthesis!\nIt's real life magic."))
	release
	end
}

script FortreeCity_EventScript_Woman {
	lock
	faceplayer
	msgbox(format("If you have a Devon Scope, you can track down invisible Kecleon hiding in the jungle."))
	msgbox(format("I love Kecleon! Fighting, Ghost, and Normal type moves don't affect them unless they've changed to a different type first."))
	release
	end
}

script FortreeCity_EventScript_Boy {
	lock
	faceplayer
	msgbox(FortreeCity_Text_BugPokemonComeThroughWindow)
	release
	end
}

script FortreeCity_EventScript_OldMan {
	msgbox(FortreeCity_Text_EveryoneHealthyAndLively, MSGBOX_NPC)
	end
}

script FortreeCity_EventScript_GameboyKid {
	lock
	faceplayer
	msgbox(format("I can tell you about all the Pokémon whose types have changed. Interested?"), MSGBOX_YESNO)
	if(var(VAR_RESULT) == NO) {
		msgbox(format("You're on your own!"))
	}
	//TODO: multichoice with all changed mons
	release
	end
}

raw `
FortreeCity_EventScript_Kecleon::
	lock
	faceplayer
	checkitem ITEM_DEVON_SCOPE
	goto_if_eq VAR_RESULT, TRUE, FortreeCity_EventScript_AskUseDevonScope
	msgbox FortreeCity_Text_SomethingUnseeable, MSGBOX_DEFAULT
	release
	end

FortreeCity_EventScript_AskUseDevonScope::
	msgbox FortreeCity_Text_UnseeableUseDevonScope, MSGBOX_YESNO
	goto_if_eq VAR_RESULT, YES, FortreeCity_EventScript_UseDevonScope
	release
	end

FortreeCity_EventScript_UseDevonScope::
	msgbox FortreeCity_Text_UsedDevonScopePokemonFled, MSGBOX_DEFAULT
	closemessage
	applymovement VAR_LAST_TALKED, Movement_KecleonAppears
	waitmovement 0
	waitse
	playmoncry SPECIES_KECLEON, CRY_MODE_ENCOUNTER
	delay 40
	waitmoncry
	applymovement VAR_LAST_TALKED, FortreeCity_Movement_KecleonFlee
	waitmovement 0
	removeobject VAR_LAST_TALKED
	release
	end

FortreeCity_Movement_KecleonFlee:
	walk_right
	step_end

FortreeCity_Text_EveryoneHealthyAndLively:
	.string "The City consists of homes built on\n"
	.string "trees.\p"
	.string "Perhaps because of that lifestyle,\n"
	.string "everyone is healthy and lively.\p"
	.string "Why, even myself--I feel as if I've\n"
	.string "grown thirty years younger.$"

FortreeCity_Text_BugPokemonComeThroughWindow:
	.string "Living on top of trees is okay.\p"
	.string "But sometimes Bug Pokémon come in\n"
	.string "through windows.\l"
	.string "It can be really startling.$"

FortreeCity_Text_SomethingUnseeable:
	.string "Something unseeable is in the way.$"

FortreeCity_Text_UnseeableUseDevonScope:
	.string "Something unseeable is in the way.\p"
	.string "Want to use the Devon Scope?$"

FortreeCity_Text_UsedDevonScopePokemonFled:
	.string "{PLAYER} used the Devon Scope.\p"
	.string "An invisible Pokémon became completely\n"
	.string "visible!\p"
	.string "The startled Pokémon fled!$"
`
